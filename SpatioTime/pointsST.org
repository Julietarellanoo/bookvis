#+PROPERTY: header-args :tangle /home/oscar/github/spacetime-vis/pointsST.R :session *R* :eval no-export
#+OPTIONS: ^:nil
#+BIND: org-latex-image-default-height "0.45\\textheight"

#+begin_src R :exports none
  ##################################################################
  ## Source code for the book: "Displaying time series, spatial and
  ## space-time data with R"
  
  ## Copyright (C) 2013-2012 Oscar Perpiñán Lamigueiro
  
  ## This program is free software you can redistribute it and/or modify
  ## it under the terms of the GNU General Public License as published
  ## by the Free Software Foundation; either version 2 of the License,
  ## or (at your option) any later version.
   
  ## This program is distributed in the hope that it will be useful, but
  ## WITHOUT ANY WARRANTY; without even the implied warranty of
  ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ## General Public License for more details.
   
  ## You should have received a copy of the GNU General Public License
  ## along with this program; if not, write to the Free Software
  ## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
  ## 02111-1307, USA.
  ####################################################################
#+end_src

#+begin_src R :exports none :tangle no
  setwd('~/Dropbox/chapman/book/')
#+end_src

#+begin_src R :exports none  
  ##################################################################
  ## Initial configuration
  ##################################################################
  ## Clone or download the repository and set the working directory
  ## with setwd to the folder where the repository is located.
  
  library(lattice)
  library(latticeExtra)
  
  myTheme <- custom.theme.2(pch=19, cex=0.7,
                            region=rev(brewer.pal(9, 'YlOrRd')),
                            symbol = brewer.pal(n=8, name = "Dark2"))
  myTheme$strip.background$col='transparent'
  myTheme$strip.shingle$col='transparent'
  myTheme$strip.border$col='transparent'
  
  xscale.components.custom <- function(...){
      ans <- xscale.components.default(...)
      ans$top=FALSE
      ans}
  yscale.components.custom <- function(...){
      ans <- yscale.components.default(...)
      ans$right=FALSE
      ans}
  myArgs <- list(as.table=TRUE,
                 between=list(x=0.5, y=0.2),
                 xscale.components = xscale.components.custom,
                 yscale.components = yscale.components.custom)
  defaultArgs <- lattice.options()$default.args
  
  lattice.options(default.theme = myTheme,
                  default.args = modifyList(defaultArgs, myArgs))
#+end_src

* Introduction
Throughout this chapter we will revisit the data from the Integrated
Air Quality system of the Madrid City Council (section
\ref{sec:airQualityData}) to illustrate visualization methods
applicable for point space-time data. This dataset comprises the time
series of measurements acquired at each station of the network
during 2011. In the section \ref{sec:bubble} the data were converted
from spatiotemporal data to spatial data, where the time
information was suppressed to display only the yearly average
values. In this chapter we will work with the whole space-time dataset
using the tools provided by the =spacetime= package
\cite{Pebesma2012}.

* Data and Spatial Information

#+begin_src R :exports none
##################################################################
## Data and spatial information
##################################################################
#+end_src

The starting point is to retrieve the data and combine it with the
spatial and temporal information. The data are contained in the
=airQuality= =data.frame=, and the locations are in =airStations=, a
=data.frame= that is converted to a =SpatialPointsDataFrame= object
with the =coordinates= method.

#+BEGIN_LaTeX
\index{Data!Air quality in Madrid}
\index{Packages!sp@\texttt{sp}}
\index{read.csv2@\texttt{read.csv2}}
#+END_LaTeX

#+begin_src R 
  library(sp)
  
  ## Spatial location of stations
  airStations <- read.csv2('data/airStations.csv')
  ## rownames are used as the ID of the Spatial object
  rownames(airStations) <- substring(airStations$Codigo, 7)
  coordinates(airStations) <- ~ long + lat
  proj4string(airStations) <- CRS("+proj=longlat +ellps=WGS84")
  ## Measurements data
  airQuality <- read.csv2('data/airQuality.csv')
  ## Only interested in NO2 
  NO2 <- airQuality[airQuality$codParam==8, ]
#+end_src

Each row of this =data.frame= corresponds to a measurement at one
of the stations during a day of the year (long format, following
the schema proposed in \cite{Pebesma2012}).

The =spacetime= package defines several classes for spatiotemporal
data inheriting the classes defined by the =sp= and =xts= packages.
In particular, the =STFDF=, a class for spatiotemporal data with full
space-time grids with =n= spatial locations and =m= times, requires a
=data.frame= with =n·m= rows, (spatial index moving fastest).  Thus,
we need to transform this structure to build a multivariate time
series where each station is a different variable (space-wide under
the schema of \cite{Pebesma2012}). The procedure is

- Add a column with the =POSIXct= time index.
- Reshape the =data.frame= from long to wide format with
  =reshape=.
- Define a multivariate time series with =zoo= (Figure
  [[fig:NO2zoo]]).
- Coerce this time series to a vector with =n·m= rows.

#+BEGIN_LaTeX
\index{reshape@\texttt{reshape}}
\index{Packages!zoo@\texttt{zoo}}
\index{Packages!spacetime@\texttt{spacetime}}
\index{STFDF@\texttt{STFDF}}
#+END_LaTeX

#+begin_src R 
  library(zoo)
  library(spacetime)
  
  NO2$time <- with(NO2, ISOdate(year, month, day))
  NO2wide <- reshape(NO2[,c('codEst', 'dat', 'time')],
                     idvar='time', timevar='codEst',
                     direction='wide')
  NO2zoo <- zoo(NO2wide[,-1], NO2wide$time)
  
  dats <- data.frame(vals=as.vector(t(NO2zoo)))
  NO2st <- STFDF(airStations, index(NO2zoo), dats)
#+end_src

* Graphics with =spacetime=
#+begin_src R :exports none
  ##################################################################
  ## Graphics with spacetime
  ##################################################################
#+end_src
The =stplot= function of the =spacetime= package supplies the main
visualization methods for spatiotemporal data. When the mode =xy= is
chosen (default) it is mainly a wrapper around =spplot= and displays a
panel with the spatial data for each element of the time index (Figure
[[fig:NO2STxy]]). The problem with this approach is that only a limited
number of panels can be correctly displayed on one page. In this
example, we print the first 12 days of the sequence.

#+BEGIN_LaTeX
\index{stplot@\texttt{stplot}}
\index{colorRampPalette@\texttt{colorRampPalette}}
#+END_LaTeX

#+begin_src R :results output graphics :exports both :file figs/NO2STxy.pdf
  airPal <- colorRampPalette(c('springgreen1', 'sienna3', 'gray5'))(5)
  
  stplot(NO2st[, 1:12], cuts=5, col.regions=airPal, edge.col='black')
#+end_src

#+CAPTION: Scatterplots of the $NO_2$ values (2011) with a panel for each day of the time series. Each circle represents a different station.
#+LABEL: fig:NO2STxy
#+RESULTS[7e86d8c75682aa68d66610cb75a9ea14833ff5b9]:
[[file:figs/NO2STxy.pdf]]

With the mode =xt=, a space-time plot with space on the x-axis and
time on the y-axis is plotted (Figure [[fig:NO2hovmoller]]).

#+begin_src R :results output graphics :exports both :file figs/NO2hovmoller.pdf
  stplot(NO2st, mode='xt', col.regions=colorRampPalette(airPal)(15),
         scales=list(x=list(rot=45)), ylab='', xlab='')
#+end_src

#+CAPTION: Space-time graphic of the NO_2 time series. Each column represents a different station (denoted with the last two digits of the code).
#+LABEL: fig:NO2hovmoller
#+RESULTS[720ac1fb68e202769dfa044473c2f888ab6a0b7a]:
[[file:figs/NO2hovmoller.pdf]]

Finally, with the mode =ts=, data are coerced to a multivariate time series
that is displayed in a single plot (Figure [[fig:NO2zoo]]).

#+begin_src R :results output graphics :exports both :file figs/NO2zoo.png :width 2000 :height 2000 :res 300
  stplot(NO2st, mode='ts', xlab='',
         lwd=0.1, col='black', alpha=0.6,
         auto.key=FALSE)
#+end_src

#+CAPTION: Time graph of the $NO_2$ time series (2011). Each line represents a different station.
#+LABEL: fig:NO2zoo
#+RESULTS[ea3cfae61f85b1a658256d688e049882c22aaaf8]:
[[file:figs/NO2zoo.png]]

These three graphics complement each other and together provide a more
complete view of the behavior of the data. For example in Figure
[[fig:NO2STxy]], we can find stations whose levels remain almost constant
throughout the 12-day period (namely, El Pardo-28079058[fn:1], the
station at the top-left corner that is far from the city center),
while others fluctuate notably during this same period (for example,
Barajas-28079027 and Urb. Embajada-28079055, the two nearby stations
at the right). On the other hand, Figure [[fig:NO2hovmoller]] loses the
spatial information but gives a more comprehensive view of the
evolution of the network. The station El Pardo-28079058 is
significantly below the rest of the stations during the whole year,
with the station Pza. Fdez Ladreda-28079056 being the opposite. In
between, the stations could be divided into two or three groups
according to their levels. Regardless, the group of stations reaches
maximum values during the first days of autumn and at the end of
winter. These maxima are clearly displayed in Figure [[fig:NO2zoo]].


* \floweroneleft Animation
#+begin_src R :exports none
##################################################################
## Animation
##################################################################
#+end_src

Another approach for displaying this spatiotemporal data is using
animation. Once again, we will take advantage of the functionalities
of the =gridSVG= package.

** Initial Snapshot
#+begin_src R :exports none
##################################################################
## Initial snapshot
##################################################################
#+end_src
The first step is to define the initial parameters of the animation:
starting values and duration.

#+BEGIN_LaTeX
\index{Packages!gridSVG@\texttt{gridSVG}}
#+END_LaTeX

#+begin_src R 
  library(gridSVG)
  ## Initial parameters
  start <- NO2st[,1]
  ## values will be encoded as size of circles,
  ## so we need to scale them
  startVals <- start$vals/5000
  
  nStations <- nrow(airStations)
  days <- index(NO2zoo)
  nDays <- length(days)
  ## Duration in seconds of the animation
  duration <- nDays*.3
#+end_src

The first snapshot of the data is produced with =spplot=. We define an
auxiliary function, =panel.circlesplot=, to display the data encoding
values with circles of variable size and color.  This function
uses =grid.circle= from the =grid= package.  

The subsequent frames of the animation will modify the colors and
sizes of the circles according to the =NO2st= object.

#+BEGIN_LaTeX
  \index{Packages!grid@\texttt{grid}}
  \index{grid.circle@\texttt{grid.circle}}
  \index{spplot@\texttt{spplot}}
#+END_LaTeX

#+begin_src R 
  library(grid)
  
  ## Auxiliary panel function to display circles
  panel.circlesplot <- function(x, y, cex, col='gray',
                                name='stationsCircles', ...){
  grid.circle(x, y, r=cex,
              gp=gpar(fill=col, alpha=0.5),
              default.units='native', name=name)
  }
  
  pStart <- spplot(start, panel=panel.circlesplot,
                   cex=startVals,
                   scales=list(draw=TRUE), auto.key=FALSE)
  pStart
#+end_src

** Intermediate States to Create the Animation
#+begin_src R :exports none
##################################################################
## Intermediate states to create the animation
##################################################################
#+end_src
From this initial state, =grid.animate= creates a collection of
animated graphical objects with the intermediate states defined by
=animUnit= and =animValue=.  As previously stated, the $NO_2$ values
will be encoded with the radius of each circle, and the color of the
circles will distinguish between weekdays and weekend.  The use of
=rep=TRUE= ensures that the animation will be repeated indefinitely.

#+BEGIN_LaTeX
\index{animValue@\texttt{animValue}}
\index{animUnit@\texttt{animUnit}}
\index{grid.animate@\texttt{grid.animate}}
#+END_LaTeX

#+begin_src R 
  ## Color to distinguish between weekdays ('green')
  ## and weekend ('blue')
  isWeekend <- function(x) {format(x, '%w') %in% c(0, 6)}
  color <- ifelse(isWeekend(days), 'blue', 'green')
  colorAnim <- animValue(rep(color, each=nStations),
                         id=rep(seq_len(nStations), nDays))
  
  ## Intermediate sizes of the circles
  vals <- NO2st$vals/5000
  vals[is.na(vals)] <- 0
  radius <- animUnit(unit(vals, 'native'),
                         id=rep(seq_len(nStations), nDays))                     
  
  ## Animation of circles including sizes and colors
  grid.animate('stationsCircles',
               duration=duration,
               r=radius,
               fill=colorAnim,
               rep=TRUE)
#+end_src  

** Time Reference: Progress Bar
#+begin_src R :exports none
##################################################################
## Time reference: progress bar
##################################################################
#+end_src
Information from an animation is better understood if a time
reference is included, for example with a progress bar.  The following
code builds a progress bar with ticks at the first day of each
month, and with color changing from gray (background) to blue as
the time advances.  On the other hand, it is convenient to provide
a method so the user can stop and restart the animation sequence
if desired.  This functionality is added with the definition of
two events, =onmouseover= and =onmouseout=, included with the
=grid.garnish= function.

#+BEGIN_LaTeX
\index{grid.rect@\texttt{grid.rect}}
\index{grid.text@\texttt{grid.text}}
\index{grid.animate@\texttt{grid.animate}}
\index{grid.segments@\texttt{grid.segments}}
\index{grid.garnish@\texttt{grid.garnish}}
#+END_LaTeX

#+begin_src R 
  ## Progress bar
  prettyDays <- pretty(days, 12)
  ## Width of the progress bar
  pbWidth <- .95
  ## Background
  grid.rect(.5, 0.01, width=pbWidth, height=.01,
            just=c('center', 'bottom'),
            name='bgbar', gp=gpar(fill='gray'))
  
  ## Width of the progress bar for each day
  dayWidth <- pbWidth/nDays
  ticks <- c(0, cumsum(as.numeric(diff(prettyDays)))*dayWidth) + .025
  grid.segments(ticks, .01, ticks, .02)
  grid.text(format(prettyDays, '%d-%b'),
                   ticks, .03, gp=gpar(cex=.5))
  ## Initial display of the progress bar
  grid.rect(.025, .01, width=0,
            height=.01, just=c('left', 'bottom'),
            name='pbar', gp=gpar(fill='blue', alpha='.3'))
  ## ...and its animation
  grid.animate('pbar', duration=duration,
               width=seq(0, pbWidth, length=duration),
               rep=TRUE)
  ## Pause animations when mouse is over the progress bar
  grid.garnish('bgbar',
               onmouseover='document.rootElement.pauseAnimations()',
               onmouseout='document.rootElement.unpauseAnimations()')
#+end_src   

The SVG file is finally produced with =gridToSVG= (Figure \ref{fig:NO2pb})

#+BEGIN_LaTeX
\index{grid.export@\texttt{grid.export}}  
#+END_LaTeX

#+begin_src R 
  grid.export('figs/NO2pb.svg')
#+end_src

#+BEGIN_LaTeX
  \begin{figure}
    \centering
    \includegraphics[width=\textwidth]{figs/NO2pb.png}
    \caption{Animated circles of the $NO_2$ space-time data with a progress bar.}
    \label{fig:NO2pb}
  \end{figure}
#+END_LaTeX

** Time Reference: A Time Series Plot
#+begin_src R :exports none
##################################################################
## Time reference: a time series plot
##################################################################
#+end_src
A different and more informative solution is to add a time series
plot instead of a progress bar.  This time series plot displays
the average value of the set of stations, with a point and a
vertical line to highlight the time position as the animation
advances (Figure \ref{fig:vLine}).
#+begin_src R
  ## Time series with average value of the set of stations
  NO2mean <- zoo(rowMeans(NO2zoo, na.rm=TRUE), index(NO2zoo))
  ## Time series plot with position highlighted
  pTimeSeries <- xyplot(NO2mean, xlab='', identifier='timePlot') +
      layer({
          grid.points(0, .5, size=unit(.5, 'char'),
                      default.units='npc',
                      gp=gpar(fill='gray'),
                      name='locator')
          grid.segments(0, 0, 0, 1, name='vLine')
      })
  
  print(pStart, position=c(0, .2, 1, 1), more=TRUE)
  print(pTimeSeries, position=c(.1, 0, .9, .25))
#+end_src


Once again, =grid.animate= creates a sequence of intermediate states
for each object of the graphical scenes: The signaling point and
vertical line follow the time evolution, while the sizes and colors of
each station circle change as in the previous approach.  Moreover, the
=onmouseover= and =onmouseout= events are defined with =grid.garnish=
so the user can pause and restart the animation by hovering the mouse
over the time series plot.
#+begin_src R 
  grid.animate('locator',
               x=unit(as.numeric(index(NO2zoo)), 'native'),
               y=unit(as.numeric(NO2mean), 'native'),
               duration=duration, rep=TRUE)
  
  xLine <- unit(index(NO2zoo), 'native')
  
  grid.animate('vLine',
               x0=xLine, x1=xLine,
               duration=duration, rep=TRUE)
  
  grid.animate('stationsCircles',
               duration=duration,
               r=radius,
               fill=colorAnim,
               rep=TRUE)
  
  ## Pause animations when mouse is over the time series plot
  grid.garnish('timePlot', grep=TRUE,
               onmouseover='document.rootElement.pauseAnimations()',
               onmouseout='document.rootElement.unpauseAnimations()')
  
  grid.export('figs/vLine.svg')
#+end_src


#+BEGIN_LaTeX
  \begin{figure}
    \centering
    \includegraphics[width=\textwidth]{figs/vLine.png}
    \caption{Animated circles of the $NO_2$ space-time data with a a time series as reference.}
    \label{fig:vLine}
  \end{figure}
#+END_LaTeX

* Footnotes

[fn:1] Use Figure \ref{fig:airMadrid} as reference of the
positions and codes of the stations.

