#+PROPERTY: header-args :session *R* :cache yes :tangle ../docs/R/osmar.R :eval no-export
#+OPTIONS: ^:nil
#+BIND: org-latex-image-default-height "0.45\\textheight"

#+begin_src R :exports none :tangle no
  setwd('~/Dropbox/chapman/book/')
#+end_src

#+begin_src R :exports none  
  ##################################################################
  ## Initial configuration
  ##################################################################
  ## Clone or download the repository and set the working directory
  ## with setwd to the folder where the repository is located.
#+end_src

* \floweroneleft OpenStreetMap with Hill Shade Layers

#+begin_src R :exports none
##################################################################
## OpenStreetMap with Hill Shade layers
##################################################################
#+end_src

Although I was born in Madrid, Galicia (north of Spain) is a very
special region for me. More precisely, the Cedeira and Valdovi√±o
regions offer a wonderful combination of wild sea, secluded beaches,
and forests. I will show you a map of these marvelous places.

** Retrieving Data from OpenStreetMap
#+begin_src R :exports none
##################################################################
## Retrieving data from OpenStreetMap
##################################################################
#+end_src

The first step is to acquire information from the OpenStreetMap
project. There are several packages to extract data from this service
but, while most of them only provide already rendered raster images,
the =osmar= package[fn:6] \cite{Eugster.Schlesinger2010} enables the
use of the raw data with classes from the packages =sp= and =igraph=.

The =get_osm= function retrieves a region defined by =corner_bbox=
using the OSM API.

#+BEGIN_LaTeX
\index{Data!OpenStreetMap}
\index{Packages!osmar@\texttt{osmar}}
\index{osmsource_api@\texttt{osmsource\_api}}
\index{get_osm@\texttt{get\_osm}}
#+END_LaTeX

#+begin_src R
  library('osmar')
  
  api <- osmsource_api()
  ymax <- 43.7031
  ymin <- 43.6181
  xmax <- -8.0224
  xmin <- -8.0808
  box <- corner_bbox(xmin, ymin, xmax, ymax)
  cedeira <- get_osm(box, source=api, full=TRUE)
#+end_src

The =cedeira= object includes three main components: nodes, ways and
relations. These components can be accessed with the functions =find=,
=subset=, =way=, =node=, =relation=, and =tags=. Thus, the different
kinds of roads can be obtained using =way= and =tags= with the
appropiate tag.
  
#+begin_src R :results output :exports both
  summary(cedeira$nodes)
#+end_src  

#+BEGIN_LaTeX
\index{find@\texttt{find}}
\index{subset@\texttt{subset}}
\index{way@\texttt{way}}
#+END_LaTeX

#+begin_src R 
  idxHighways <- find(cedeira, way(tags(k=='highway')))
  highways <- subset(cedeira, way_ids=idxHighways)
  idxStreets <- find(highways, way(tags(v=='residential')))
  idxPrimary <- find(highways, way(tags(v=='primary')))
  idxSecondary <- find(highways, way(tags(v=='secondary')))
  idxTertiary <- find(highways, way(tags(v=='tertiary')))
  idxOther <- find(highways,
                   way(tags(v=='unclassified' |
                            v=='footway' |
                            v=='steps')))
#+end_src  

The result of =find= is the index of each element. The correspondent
spatial object is extracted with =find_down= and =subset=, and can be
converted to a class defined by the =sp= package with =as_sp=. The
following =spFromOSM= function encodes the procedure, and extracts the
=SpatialLines= object that represent each type of road.

#+BEGIN_LaTeX
\index{as_sp@\texttt{as\_sp}}
\index{find_down@\texttt{find\_down}}
#+END_LaTeX

#+begin_src R 
  spFromOSM <- function(source, index, type='lines'){
    idx <- find_down(source, index)
    obj <- subset(source, ids=idx)
    objSP <- as_sp(obj, type)
    }
  
  streets <- spFromOSM(cedeira, way(idxStreets))
  primary <- spFromOSM(cedeira, way(idxPrimary))
  secondary <- spFromOSM(cedeira, way(idxSecondary))
  tertiary <- spFromOSM(cedeira, way(idxTertiary))
  other <- spFromOSM(cedeira, way(idxOther))
#+end_src  
  
A similar procedure can be applied to construct a =SpatialPoints=
object with the collection of places with name:

#+BEGIN_LaTeX
\index{match@\texttt{match}}
#+END_LaTeX

#+begin_src R 
  idxPlaces <- find(cedeira, node(tags(k=='name')))
  places <- spFromOSM(cedeira, node(idxPlaces), 'points')
  
  nms <- subset(cedeira$nodes$tags, subset=(k=='name'), select=c('id', 'v'))
  ord <- match(idxPlaces, nms$id)
  nms <- nms[ord,]
  places$name <- nms$v[ord]
  
  ## Cedeira town will be printed differently
  idxCedeira <- which(nms$v=='Cedeira') ##Main town
  cedeiraCoords <- coordinates(places[idxCedeira,])
  places <- places[-idxCedeira,]
#+end_src  

** Hill Shading
#+begin_src R :exports none
##################################################################
## Hill Shading
##################################################################
#+end_src
#+BEGIN_LaTeX
\index{Hill shading}
#+END_LaTeX

The second step is to produce layers to display the topography. A
suitable method is shaded relief or hill shading. This technique
simulates the cast shadow thrown from a light source upon a raised
relief map. The hill shade layer can be computed from the slope and
aspect layers derived from a Digital Elevation Model (DEM). This layer
will underlay the DEM raster, which will be printed using
semitransparency.

The DEM of Galicia is available at the Geonetwork service of the Xunta de Galicia[fn:1]. I have extracted the data corresponding to the region of interest using =crop=, and the corresponding files are available at the =data= folder of the book repository.

#+BEGIN_LaTeX
\index{Packages!raster@\texttt{raster}}
\index{Packages!rasterVis@\texttt{rasterVis}}
\index{Data!Geonetwork}
#+END_LaTeX

#+begin_src R
  library(raster)

  cedeiraSP <- as_sp(cedeira, 'points')
  projCedeira <- projection(cedeiraSP)

  demCedeira <- raster('data/demCedeira')
  projection(demCedeira) <- projCedeira
  demCedeira[demCedeira <= 0] <- NA
#+end_src

The =slope= and =aspect= layers are computed with the =terrain=
function, and the hill shade layer is derived with these layers for a
fixed sun position. 

#+BEGIN_LaTeX
\index{terrain@\texttt{terrain}}
\index{hillShade@\texttt{hillShade}}
\index{Hill shading}
#+END_LaTeX

#+begin_src R 
  slope <- terrain(demCedeira, 'slope')
  aspect <- terrain(demCedeira, 'aspect')
  hsCedeira <- hillShade(slope=slope, aspect=aspect,
                         angle=20, direction=30)
#+end_src

** Overlaying Layers of Information
#+begin_src R :exports none
##################################################################
## Overlaying layers of information
##################################################################
#+end_src
And finally, the third step is to display the different layers of
information in correct order (Figure [[fig:cedeiraOsmar]]):

- The hill shade layer is created with the =levelplot= method for
  =Raster= objects defined in the =rasterVis= package. The
  =GrTheme= is modified to display the sea region with blue color.

- The DEM raster is printed with terrain colors and
  semitransparency over the hill shade layer.

- The roads are displayed with an auxiliary function (=sp.road=)
  that produces a colored line over a thicker black line. 

- The places are represented with =sp.points= and labeled with
  the =sp.pointLabel= method, a modification of the =pointLabel=
  function for =base= graphics, both defined in the =maptools=
  package. These functions use optimization routines to find good
  locations for point labels without overlaps. 

#+BEGIN_LaTeX
\index{Packages!maptools@\texttt{maptools}}  
\index{Packages!sp@\texttt{sp}}  
\index{Packages!latticeExtra@\texttt{latticeExtra}}  
\index{Packages!colorspace@\texttt{colorspace}}  
\index{sp.lines@\texttt{sp.lines}}
\index{sp.lines@\texttt{sp.points}}
\index{sp.lines@\texttt{sp.pointLabel}}
#+END_LaTeX

#+begin_src R :results output graphics :exports both :file figs/cedeiraOsmar.pdf
  library(maptools)
  library(latticeExtra)
  library(colorspace)
  library(rasterVis)
  
  ##Auxiliary function to display the roads. A thicker black line in
  ##the background and a thinner one with an appropiate color.
  sp.road <- function(line, lwd=5, blwd=7,
                      col='indianred1', bcol='black'){
    sp.lines(line, lwd=blwd, col=bcol)
    sp.lines(line, lwd=lwd, col=col)
  }
  
  ## The background color of the panel is set to blue to represent the sea
  hsTheme <- modifyList(GrTheme(), list(panel.background=list(col='skyblue3')))
  ## DEM with terrain colors and semitransparency
  terrainTheme <- modifyList(rasterTheme(region=terrain_hcl(n=15)),
                                  list(regions=list(alpha=0.6)))
  ## Hill shade and DEM overlaid
  levelplot(hsCedeira, maxpixels=ncell(hsCedeira),
            par.settings=hsTheme, margin=FALSE, colorkey=FALSE) +
    levelplot(demCedeira, maxpixels=ncell(demCedeira),
              par.settings=terrainTheme) +
    ## Roads and places
    layer({
      ## Street and roads
      sp.road(streets, lwd=1, blwd=2, col='white')
      sp.road(other, lwd=2, blwd=3, col='white')
      sp.road(tertiary, lwd=3, blwd=4, col='palegreen')
      sp.road(secondary, lwd=4, blwd=6, col='midnightblue')
      sp.road(primary, col='indianred1')
      ## Places except Cedeira town
      sp.points(places, pch=19, col='black', cex=0.4, alpha=0.8)
      sp.pointLabel(places, labels=places$name,
                        fontfamily = 'Palatino', 
                        cex=0.6, col='black')
      ## Cedeira town
      panel.points(cedeiraCoords, pch=18, col='black', cex=1)
      panel.text(cedeiraCoords, labels='Cedeira', pos=2, offset=1)
      })
#+end_src

#+CAPTION: Main roads near Cedeira, Galicia. Local topography is displayed with the hill shading technique. Some places are highlighted.
#+LABEL: fig:cedeiraOsmar
#+RESULTS:
[[file:figs/cedeiraOsmar.pdf]]

* Footnotes

[fn:6] Its webpage [[http://osmar.r-forge.r-project.org/]] proposes
  two interesting demos.

[fn:1] http://xeocatalogo.xunta.es/geonetwork/srv/gl/main.home
