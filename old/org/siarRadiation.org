#+PROPERTY:  session *R*
#+PROPERTY:  results output
#+PROPERTY:  exports both
#+PROPERTY:  tangle yes

#+begin_src R :exports none
  setwd('~/Dropbox/chapman/book/')
  load('data/navarra.RData')
#+end_src

** Time graph of the variations of a variable measured at different locations

# Daily solar radiation\index{Data!Solar radiation} incident on the
# horizontal plane is registered by meterological stations and
# estimated from satellite images. This meteorological variable is
# important for a wide variety of scientific disciplines and
# engineering applications. Its variations and trends, dependent on
# the location (mainly latitude, and also longitude and altitude)
# and on time (day of the year) have been analysed and modelled in a
# huge collection of papers and reports. In this section we will
# focus our attention on the time evolution of the solar
# radiation. The spatial distribution and the spatio-time behaviour
# will be the subject of later sections.
# ##TODO: añadir referencias cruzadas de sección

# The stations of the SIAR network\index{Data!SIAR} include first
# class pyranometers according to the World Meteorological
# Organization (WMO), whose absolute accuracy is within $\pm 5\%$
# and is typically lower than $\pm 3\%$. Solar irradiance is
# recorded every fifteen minutes and then collated through a
# datalogger within the station to generate the daily irradiation,
# which is later sent to the regional and national centers. 

# First let's download the solar radiation data of 2011 from the
# meteorological stations of Navarra (=prov=31=). For each station
# (=navarraSIAR$N_Estacion=) =read.zoo= downloads data from the
# corresponding internet direction (=URL=) and provides the
# information as a =zoo= object. This is the same approach used with
# the Aranjuez station. 
# ##TODO: añadir referencias cruzadas de sección

# The next code retrieves the daily irradiation of the whole set of
# meteorological stations of Navarra with =lapply= and
# =read.zoo=. The result is a list of =zoo= objects. Some stations
# do not provide data for this time period and produce an
# error. Therefore =read.zoo= is evaluated inside a =try= call to
# remove these stations from the list. =do.call= and =cbind= provide
# a =data.frame= only with the useful stations and whose column
# names are the shortened form of the original names of the
# stations.
# \index{lapply@\texttt{lapply}}
# \index{Packages!zoo@\texttt{zoo}}
# \index{read.zoo@\texttt{read.zoo}}
# \index{sapply@\texttt{sapply}}
# \index{do.call\texttt{do.call}}
# #+begin_src R
#   library(zoo)
    
#   SIAR <- read.csv('http://solar.r-forge.r-project.org/data/SIAR.csv')
#   table(SIAR$Provincia)
    
#   prov=31 ##navarra
#   navarraSIAR <- subset(SIAR, Provincia=='Navarra')
#   start='01/01/2011'
#   end='31/12/2011'
  
#   navarra <- lapply(navarraSIAR$N_Estacion, FUN=function(i){
#     URL = paste("http://www.marm.es/siar/exportador.asp?T=DD&P=", 
#       prov, "&E=", i, "&I=", start, "&F=", end, sep = "")
#     dat <- try(read.zoo(URL, index.column = 1,
#                         format = "%d/%m/%Y", 
#                         header = TRUE, skip = 1, fill = TRUE,
#                         dec = ",", as.is = TRUE))
#     if (class(dat)=='try-error') NULL else dat$Radiacion
#   })
  
#   names(navarra) <- make.names(abbreviate(navarraSIAR$Estacion))
    
#   ## Which stations are not accesible?
#   err <- sapply(navarra, is.null)
  
#   navarra <- do.call(cbind, navarra[!err])
# #+end_src


The first attempt to display this multivariate time series makes
use of the =xyplot.zoo= method. The objective of this graphic is
to display the behaviour of the collection as a whole: the series
are superposed in the same panel (=superpose=TRUE=) without legend
(=auto.key=TRUE=), using thin lines (=lwd=0.3=) and partial
transparency (=alpha=0.3=). Transparency softens overplotting
problems and reveals density clusters since regions with more
overlapping lines are darker. The figure \ref{fig:navarraNaive}
displays the variations around the time average (=avRad=).

\index{zoo@\texttt{zoo}} 
\index{xyplot.zoo@\texttt{xyplot.zoo}}
#+CAPTION: Time plot of the variations around time average of solar radiation measurements from the meteorological stations of Navarra.
#+LABEL: fig:navarraNaive
#+begin_src R :results output graphics :exports both :file figs/navarra.pdf
  avRad <- zoo(rowMeans(navarra, na.rm=1), index(navarra))
  pNavarra <- xyplot(navarra - avRad, superpose=TRUE, auto.key=FALSE,
                     lwd=0.3, alpha=0.2, col='black') 
  pNavarra
#+end_src

This result can be improved with two different tools: the horizon
graph with =horizonplot= and dynamic labelling with the =gridSVG=
package.

*** The horizon graph

The horizon graph\index{Horizon graph} is useful to examine how a
large number of series changes through time, and to do so in a way
that allows both comparisons between the individual time series and
and independent analysis of each series. Moreover,
extraordinary behaviours and predominant patterns are easily
distinguished \cite{Few2008}.

This graph displays several stacked series collapsing the y-axis
to free vertical space:
- Positive and negative values share the same vertical
  space. Negative values are inverted and placed above the
  reference line. Sign is encoded using different hues (positive
  values in blue and negative values in red).
- Differences in magnitude are displayed as differences in color
  intensity (darker colors for greater differences).
- The color bands share the same baseline and are superposed with
  darker bands in front of the ligther ones.

Since the panels share the same design structure, once this
technique is understood, it is easy to establish comparisons or
spot extraordinary events.  This method is what Tufte described as
small multiples\index{Small multiples} \cite{Tufte1990}.

Figure \ref{fig:navarraHorizonplot} displays the variations of
solar radiation around the time average with an horizon graph
using a row for each time series.
\index{Packages!latticeExtra@\texttt{latticeExtra}}
\index{horizonplot@\texttt{horizonplot}}
#+CAPTION: Horizonplot of variations around time average of solar radiation measurements from the meteorological stations of Navarra.
#+LABEL: fig:navarraHorizonplot
#+begin_src R :results output graphics :exports both :file figs/navarraHorizonplot.pdf
  library(latticeExtra)
  
  horizonplot(navarra-avRad, layout=c(1, ncol(navarra)),
              origin=0, colorkey=TRUE)
#+end_src

*** Interaction with =gridSVG=

The =gridSVG= package provides functions to convert =grid=-
based =R= graphics to an SVG format. It provides several functions
to add dynamic and interactive capabilities to =R= graphics. In
this section we will use =grid.script=, a function to add
JavaScript code to a plot.

The first step is to specify which component of the scene
will run the JavaScript code. The =grid.ls= function  returns a
listing of the names of grobs or viewports included in the graphic
output: only the lines will be connected with the JavaScript
code. 

\index{Packages!gridSVG@\texttt{gridSVG}}
\index{grid.ls@\texttt{grid.ls}}
#+begin_src R
  library(gridSVG)
  ## grobs in the graphical output
  pNavarra
  grobs <- grid.ls(print=FALSE)
  ## only interested in some of them
  nms <- grobs$name[grobs$type == "grobListing"]
  idxNames <- grep('lines', nms)
  IDs <- nms[idxNames]
#+end_src

The second step is to modify each =grob= (graphical object) to add
attributes that specify when it will call JavaScript code. For
each line identified with the elements of the =IDs= vector and
associated to a meteorological station, the =navarra= object is
accessed to extract the annual mean value of the daily radiation
and the abbreviated name of the corresponding station.  The
=grid.garnish= function adds attributes to the =grob= of each line
so that when the mouse moves over a grob a tooltip is displayed to
show the information defined by =info= and the line is highlighted
and colored in red, and to hide the tooltip and to set the default
parameters of the line when the mouse hovers out of the =grob=.

\index{grid.garnish@\texttt{grid.garnish}}
#+begin_src R
  for (id in unique(IDs)){
    ## extract information from the data
    ## according to the ID value
    i <- strsplit(id, '\\.')
    i <- sapply(i, function(x)as.numeric(x[5]))
  
    ## Information to be attached to each line: annual mean of daily
    ## radiation and abbreviated name of the station
    dat <- round(mean(navarra[,i], na.rm=TRUE), 2)
    info <- paste(names(navarra)[i], paste(dat, collapse=','),
                  sep=':')
    ## attach SVG attributes
    grid.garnish(id,
                 onmouseover=paste("showTooltip(evt,'", info, "')"),
                 onmouseout="hideTooltip(evt)")
  }
#+end_src

Finally, =grid.script= adds a script file that contains the
JavaScript code to draw the tooltips and =gridToSVG= exports
the whole scene to SVG. 

\index{grid.script@\texttt{grid.script}}
\index{gridToSVG@\texttt{gridToSVG}}
\index{Javascript}
#+begin_src R
  grid.script(filename="tooltip.js")
  gridToSVG('figs/navarraRadiation.svg')
#+end_src

A snapshot of the result, as viewed in a browser with a line
highlighted, is shown in Figure \ref{fig:navarraSVG}.

#+CAPTION: SVG with R
#+LABEL: fig:navarraSVG
\includegraphics{figs/navarraSVG_captura.png}

##TODO: ¿explicitar código Javascript?
##TODO: añadir hyperlink a OpenStreetMap?
